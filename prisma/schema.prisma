// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
<<<<<<< HEAD
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
=======
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(OPERATOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
>>>>>>> 8488418c3f470030bcb22429e91e75c7bf005433
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rentals       Rental[]
}

model Equipment {
  id            String    @id @default(cuid())
  name          String
  description   String?
  category      String
  status        EquipmentStatus @default(AVAILABLE)
<<<<<<< HEAD
  quantity      Int           @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
=======
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
>>>>>>> 8488418c3f470030bcb22429e91e75c7bf005433
  rentals       Rental[]
}

model Rental {
  id            String    @id @default(cuid())
  equipmentId   String
  customerId    String
<<<<<<< HEAD
  quantity      Int         @default(1)
  startDate     DateTime
  endDate       DateTime?
=======
  startDate     DateTime
  endDate       DateTime
>>>>>>> 8488418c3f470030bcb22429e91e75c7bf005433
  status        RentalStatus @default(ACTIVE)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
  customer      Customer  @relation(fields: [customerId], references: [id])
<<<<<<< HEAD

  @@index([equipmentId])
  @@index([customerId])
  @@index([startDate])
  @@index([endDate])
  @@index([status])
=======
>>>>>>> 8488418c3f470030bcb22429e91e75c7bf005433
}

enum Role {
  ADMIN
  OPERATOR
}

enum EquipmentStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  RETIRED
}

enum RentalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  OVERDUE
<<<<<<< HEAD
} 
=======
}
>>>>>>> 8488418c3f470030bcb22429e91e75c7bf005433
